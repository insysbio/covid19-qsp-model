#= 
    This code was generated by heta-compiler 0.7.2
    
=#

__platform__ = (function()

### create default constants
nameless_constants_num_ = NamedTuple{(
  :kcell_to_cell,:NA_pmole,:sputum_dilution_coef,:k_apo_pc,:kbase_apo_vpc,:kbase_tran_pc_ipc,:kbase_tran_ipc_vpc,:k_shed_ace2_pc,:k_off_cov_ace2,:Num_sp_per_cov,:Kd_spike_ace2,:k_ent_cov_ipc,:k_rel_cov_vpc,:k_unc_cov_vpc,:k_rep_cov_rna_vpc,:EC50_rep_cov_rna_vpc,:k_ass_cov_vpc,:k_deg_cov,:Nmax_cov_per_cell,:k_deg_cov_rna,:T_sw_ir,:ET50_ir,:Emax_ir_apo,:n_ir,:Kd_anti_Ab,:anti_Ab_max,:Vol_pc,:L_to_mL,
)}(Float64[
  1000,602000000000,0.1,0.00082,0.00082,4,4,1.8,23.56,150,4670,0.936,2,14,0.2,9992,0.39,0.17,11900,17,50,190,700,5,14300,941000,1.33e-12,1000,
])

### create default observables
nameless_records_output_ = NamedTuple{(
  :time_day,:k_syn_ace2_pc,:k_tran_pc_ipc,:k_tran_ipc_vpc,:VO,:Kd_cov_ace2,:ACE2_pc_per_cell,:COV_ACE2_pc_per_cell,:ACE2_ipc_per_cell,:COV_ACE2_ipc_per_cell,:COV_ipc_per_cell,:ACE2_vpc_per_cell,:COV_ACE2_vpc_per_cell,:COV_vpc_per_cell,:COVass_vpc_per_cell,:COV_RNA_vpc_per_cell,:COV_num_sputum_ml,:PC_tot,:PC_percent,:iPC_percent,:vPC_percent,:ACE2_pc_per_cell_tot,:ACE2_ipc_per_cell_tot,:ACE2_vpc_per_cell_tot,:COV_pc_per_cell_tot,:COV_ipc_per_cell_tot,:COV_vpc_per_cell_tot,:steric_factor_pc,:steric_factor_ipc,:steric_factor_vpc,:COV_sgRNA_perc,:IR_apo,:k_apo_vpc,:switch_ir,:Vol_alv,:PC,:iPC,:vPC,:PC_hs_ss,:ACE2_pc,:ACE2_pc_hs_ss,:COV_ACE2_pc,:ACE2_ipc,:COV_ACE2_ipc,:COV_ipc,:ACE2_vpc,:COV_ACE2_vpc,:COV_vpc,:COV_RNA_vpc,:COV,:COV_RNA,:COVass_vpc,:anti_Ab,:V_mat_pc,:V_tran_pc_ipc,:V_tran_ipc_vpc,:V_apo_pc,:V_apo_ipc,:V_apo_vpc,:V_syn_ace2_pc,:V_shed_ace2_pc,:V_bind_cov_ace2_pc,:V_deg_ace2_apo_pc,:V_deg_cov_ace2_apo_pc,:V_tran_ace2_pc_ipc,:V_tran_cov_ace2_pc_ipc,:V_syn_ace2_ipc,:V_shed_ace2_ipc,:V_bind_cov_ace2_ipc,:V_deg_ace2_apo_ipc,:V_deg_cov_ace2_apo_ipc,:V_deg_cov_apo_ipc,:V_ent_cov_ipc,:V_tran_ace2_ipc_vpc,:V_tran_cov_ace2_ipc_vpc,:V_tran_cov_ipc_vpc,:V_syn_ace2_vpc,:V_shed_ace2_vpc,:V_bind_cov_ace2_vpc,:V_deg_ace2_apo_vpc,:V_deg_cov_ace2_apo_vpc,:V_ent_cov_vpc,:V_unc_cov_vpc,:V_rep_cov_rna_vpc,:V_ass_cov_vpc,:V_rel_cov_vpc,:V_deg_cov_apo_vpc,:V_deg_cov_ass_apo_vpc,:V_deg_cov_rna_apo_vpc,:V_deg_cov,:V_deg_cov_rna,
)}(Bool[
  false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,
])

### create default events
nameless_events_active_ = NamedTuple{(
  :viral_load,
)}(Bool[
  true,
])

### initialization of ODE variables and Records
function nameless_init_func_(__constants__)
    # Heta initialize
    t = 0.0 # initial time
    time_day = t / 2.4e+1
    COVass_vpc = 0e+0
    vPC = 1e+0
    Vol_alv = 0.014
    COVass_vpc_per_cell = __constants__[2] * COVass_vpc / vPC / Vol_alv / __constants__[1]
    COV = 0.0018
    COV_RNA = 0e+0
    COV_num_sputum_ml = __constants__[3] * (COV + COV_RNA) * __constants__[2] / __constants__[28]
    PC = 2.643e+9
    iPC = 1e+0
    PC_tot = PC + iPC + vPC
    PC_percent = 1e+2 * PC / PC_tot
    iPC_percent = 1e+2 * iPC / PC_tot
    vPC_percent = 1e+2 * vPC / PC_tot
    ACE2_pc = 6.15e+2
    ACE2_pc_per_cell = __constants__[2] * ACE2_pc / PC / Vol_alv / __constants__[1]
    COV_ACE2_pc = 0e+0
    COV_ACE2_pc_per_cell = __constants__[2] * COV_ACE2_pc / PC / Vol_alv / __constants__[1]
    ACE2_pc_per_cell_tot = ACE2_pc_per_cell + COV_ACE2_pc_per_cell
    ACE2_ipc = 0e+0
    ACE2_ipc_per_cell = __constants__[2] * ACE2_ipc / iPC / Vol_alv / __constants__[1]
    COV_ACE2_ipc = 0e+0
    COV_ACE2_ipc_per_cell = __constants__[2] * COV_ACE2_ipc / iPC / Vol_alv / __constants__[1]
    ACE2_ipc_per_cell_tot = ACE2_ipc_per_cell + COV_ACE2_ipc_per_cell
    ACE2_vpc = 0e+0
    ACE2_vpc_per_cell = __constants__[2] * ACE2_vpc / vPC / Vol_alv / __constants__[1]
    COV_ACE2_vpc = 0e+0
    COV_ACE2_vpc_per_cell = __constants__[2] * COV_ACE2_vpc / vPC / Vol_alv / __constants__[1]
    ACE2_vpc_per_cell_tot = ACE2_vpc_per_cell + COV_ACE2_vpc_per_cell
    COV_pc_per_cell_tot = COV_ACE2_pc_per_cell
    COV_ipc = 0e+0
    COV_ipc_per_cell = __constants__[2] * COV_ipc / iPC / Vol_alv / __constants__[1]
    COV_ipc_per_cell_tot = COV_ACE2_ipc_per_cell + COV_ipc_per_cell
    COV_vpc = 0e+0
    COV_vpc_per_cell = __constants__[2] * COV_vpc / vPC / Vol_alv / __constants__[1]
    COV_RNA_vpc = 0e+0
    COV_RNA_vpc_per_cell = __constants__[2] * COV_RNA_vpc / vPC / Vol_alv / __constants__[1]
    COV_vpc_per_cell_tot = COV_ACE2_vpc_per_cell + COV_vpc_per_cell + COV_RNA_vpc_per_cell
    COV_sgRNA_perc = 1e+2 * COV_RNA / (COV + COV_RNA)
    PC_hs_ss = 2.643e+9
    V_mat_pc = Vol_alv * __constants__[4] * PC_hs_ss
    k_tran_pc_ipc = __constants__[6] * COV_ACE2_pc / Vol_alv
    V_tran_pc_ipc = Vol_alv * k_tran_pc_ipc * PC
    k_tran_ipc_vpc = __constants__[7] * COV_ipc / Vol_alv
    V_tran_ipc_vpc = Vol_alv * k_tran_ipc_vpc * iPC
    V_apo_pc = Vol_alv * __constants__[4] * PC
    V_apo_ipc = Vol_alv * __constants__[4] * iPC
    switch_ir = 0e+0
    IR_apo = 1e+0 + switch_ir * __constants__[23] * NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]) / (NaNMath.pow((1e+0 + __constants__[22] / __constants__[21]), __constants__[24]) + NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]))
    k_apo_vpc = __constants__[5] * IR_apo
    V_apo_vpc = Vol_alv * k_apo_vpc * vPC
    ACE2_pc_hs_ss = 6.15e+2
    k_syn_ace2_pc = __constants__[8] * ACE2_pc_hs_ss / PC_hs_ss / __constants__[27] / Vol_alv / __constants__[1]
    V_syn_ace2_pc = __constants__[27] * k_syn_ace2_pc * PC * Vol_alv * __constants__[1]
    V_shed_ace2_pc = __constants__[8] * ACE2_pc
    steric_factor_pc = 1e+0 - COV_ACE2_pc_per_cell / __constants__[19]
    anti_Ab = switch_ir * __constants__[26] * NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]) / (NaNMath.pow((1e+0 + __constants__[22] / __constants__[21]), __constants__[24]) + NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]))
    VO = anti_Ab / (__constants__[25] + anti_Ab)
    Kd_cov_ace2 = __constants__[11] / __constants__[10] / (1e+0 - VO)
    V_bind_cov_ace2_pc = __constants__[9] * (steric_factor_pc * COV * ACE2_pc / Kd_cov_ace2 - COV_ACE2_pc)
    V_deg_ace2_apo_pc = __constants__[4] * ACE2_pc
    V_deg_cov_ace2_apo_pc = __constants__[4] * COV_ACE2_pc
    V_tran_ace2_pc_ipc = k_tran_pc_ipc * ACE2_pc
    V_tran_cov_ace2_pc_ipc = k_tran_pc_ipc * COV_ACE2_pc
    V_syn_ace2_ipc = __constants__[27] * k_syn_ace2_pc * iPC * Vol_alv * __constants__[1]
    V_shed_ace2_ipc = __constants__[8] * ACE2_ipc
    steric_factor_ipc = 1e+0 - COV_ACE2_ipc_per_cell / __constants__[19]
    V_bind_cov_ace2_ipc = __constants__[9] * (steric_factor_ipc * COV * ACE2_ipc / Kd_cov_ace2 - COV_ACE2_ipc)
    V_deg_ace2_apo_ipc = __constants__[4] * ACE2_ipc
    V_deg_cov_ace2_apo_ipc = __constants__[4] * COV_ACE2_ipc
    V_deg_cov_apo_ipc = __constants__[4] * COV_ipc
    V_ent_cov_ipc = __constants__[12] * COV_ACE2_ipc
    V_tran_ace2_ipc_vpc = k_tran_ipc_vpc * ACE2_ipc
    V_tran_cov_ace2_ipc_vpc = k_tran_ipc_vpc * COV_ACE2_ipc
    V_tran_cov_ipc_vpc = k_tran_ipc_vpc * COV_ipc
    V_syn_ace2_vpc = __constants__[27] * k_syn_ace2_pc * vPC * Vol_alv * __constants__[1]
    V_shed_ace2_vpc = __constants__[8] * ACE2_vpc
    steric_factor_vpc = 1e+0 - COV_ACE2_vpc_per_cell / __constants__[19]
    V_bind_cov_ace2_vpc = __constants__[9] * (steric_factor_vpc * COV * ACE2_vpc / Kd_cov_ace2 - COV_ACE2_vpc)
    V_deg_ace2_apo_vpc = k_apo_vpc * ACE2_vpc
    V_deg_cov_ace2_apo_vpc = k_apo_vpc * COV_ACE2_vpc
    V_ent_cov_vpc = __constants__[12] * COV_ACE2_vpc
    V_unc_cov_vpc = __constants__[14] * COV_vpc
    V_rep_cov_rna_vpc = __constants__[15] * COV_RNA_vpc / (1e+0 + (COV_RNA_vpc / (vPC * Vol_alv * __constants__[1]) / __constants__[27]) / __constants__[16])
    V_ass_cov_vpc = __constants__[17] * COV_RNA_vpc
    V_rel_cov_vpc = __constants__[13] * COVass_vpc
    V_deg_cov_apo_vpc = k_apo_vpc * COV_vpc
    V_deg_cov_ass_apo_vpc = k_apo_vpc * COVass_vpc
    V_deg_cov_rna_apo_vpc = k_apo_vpc * COV_RNA_vpc
    V_deg_cov = Vol_alv * __constants__[18] * COV
    V_deg_cov_rna = Vol_alv * __constants__[20] * COV_RNA
    
    # save results

    return (
        Float64[
            PC * Vol_alv,
            iPC * Vol_alv,
            vPC * Vol_alv,
            ACE2_pc,
            COV_ACE2_pc,
            ACE2_ipc,
            COV_ACE2_ipc,
            COV_ipc,
            ACE2_vpc,
            COV_ACE2_vpc,
            COV_vpc,
            COV_RNA_vpc,
            COV * Vol_alv,
            COV_RNA * Vol_alv,
            COVass_vpc,
        ],
        Float64[
            __constants__...,
            switch_ir,
            Vol_alv,
            PC_hs_ss*Vol_alv,
            ACE2_pc_hs_ss,
        ]
    )
end

### calculate RHS of ODE
function nameless_ode_func_(__du__, __u__, __p__, t)
    __constants__ = __p__[1:28]
    (switch_ir,Vol_alv,PC_hs_ss_,ACE2_pc_hs_ss,) = __p__[29:32]
    (PC_,iPC_,vPC_,ACE2_pc,COV_ACE2_pc,ACE2_ipc,COV_ACE2_ipc,COV_ipc,ACE2_vpc,COV_ACE2_vpc,COV_vpc,COV_RNA_vpc,COV_,COV_RNA_,COVass_vpc,) = __u__ 

    # Heta rules
    time_day = t / 2.4e+1
    vPC = vPC_ / Vol_alv
    COVass_vpc_per_cell = __constants__[2] * COVass_vpc / vPC / Vol_alv / __constants__[1]
    COV = COV_ / Vol_alv
    COV_RNA = COV_RNA_ / Vol_alv
    COV_num_sputum_ml = __constants__[3] * (COV + COV_RNA) * __constants__[2] / __constants__[28]
    PC = PC_ / Vol_alv
    iPC = iPC_ / Vol_alv
    PC_tot = PC + iPC + vPC
    PC_percent = 1e+2 * PC / PC_tot
    iPC_percent = 1e+2 * iPC / PC_tot
    vPC_percent = 1e+2 * vPC / PC_tot
    ACE2_pc_per_cell = __constants__[2] * ACE2_pc / PC / Vol_alv / __constants__[1]
    COV_ACE2_pc_per_cell = __constants__[2] * COV_ACE2_pc / PC / Vol_alv / __constants__[1]
    ACE2_pc_per_cell_tot = ACE2_pc_per_cell + COV_ACE2_pc_per_cell
    ACE2_ipc_per_cell = __constants__[2] * ACE2_ipc / iPC / Vol_alv / __constants__[1]
    COV_ACE2_ipc_per_cell = __constants__[2] * COV_ACE2_ipc / iPC / Vol_alv / __constants__[1]
    ACE2_ipc_per_cell_tot = ACE2_ipc_per_cell + COV_ACE2_ipc_per_cell
    ACE2_vpc_per_cell = __constants__[2] * ACE2_vpc / vPC / Vol_alv / __constants__[1]
    COV_ACE2_vpc_per_cell = __constants__[2] * COV_ACE2_vpc / vPC / Vol_alv / __constants__[1]
    ACE2_vpc_per_cell_tot = ACE2_vpc_per_cell + COV_ACE2_vpc_per_cell
    COV_pc_per_cell_tot = COV_ACE2_pc_per_cell
    COV_ipc_per_cell = __constants__[2] * COV_ipc / iPC / Vol_alv / __constants__[1]
    COV_ipc_per_cell_tot = COV_ACE2_ipc_per_cell + COV_ipc_per_cell
    COV_vpc_per_cell = __constants__[2] * COV_vpc / vPC / Vol_alv / __constants__[1]
    COV_RNA_vpc_per_cell = __constants__[2] * COV_RNA_vpc / vPC / Vol_alv / __constants__[1]
    COV_vpc_per_cell_tot = COV_ACE2_vpc_per_cell + COV_vpc_per_cell + COV_RNA_vpc_per_cell
    COV_sgRNA_perc = 1e+2 * COV_RNA / (COV + COV_RNA)
    PC_hs_ss = PC_hs_ss_ / Vol_alv
    V_mat_pc = Vol_alv * __constants__[4] * PC_hs_ss
    k_tran_pc_ipc = __constants__[6] * COV_ACE2_pc / Vol_alv
    V_tran_pc_ipc = Vol_alv * k_tran_pc_ipc * PC
    k_tran_ipc_vpc = __constants__[7] * COV_ipc / Vol_alv
    V_tran_ipc_vpc = Vol_alv * k_tran_ipc_vpc * iPC
    V_apo_pc = Vol_alv * __constants__[4] * PC
    V_apo_ipc = Vol_alv * __constants__[4] * iPC
    IR_apo = 1e+0 + switch_ir * __constants__[23] * NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]) / (NaNMath.pow((1e+0 + __constants__[22] / __constants__[21]), __constants__[24]) + NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]))
    k_apo_vpc = __constants__[5] * IR_apo
    V_apo_vpc = Vol_alv * k_apo_vpc * vPC
    k_syn_ace2_pc = __constants__[8] * ACE2_pc_hs_ss / PC_hs_ss / __constants__[27] / Vol_alv / __constants__[1]
    V_syn_ace2_pc = __constants__[27] * k_syn_ace2_pc * PC * Vol_alv * __constants__[1]
    V_shed_ace2_pc = __constants__[8] * ACE2_pc
    steric_factor_pc = 1e+0 - COV_ACE2_pc_per_cell / __constants__[19]
    anti_Ab = switch_ir * __constants__[26] * NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]) / (NaNMath.pow((1e+0 + __constants__[22] / __constants__[21]), __constants__[24]) + NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]))
    VO = anti_Ab / (__constants__[25] + anti_Ab)
    Kd_cov_ace2 = __constants__[11] / __constants__[10] / (1e+0 - VO)
    V_bind_cov_ace2_pc = __constants__[9] * (steric_factor_pc * COV * ACE2_pc / Kd_cov_ace2 - COV_ACE2_pc)
    V_deg_ace2_apo_pc = __constants__[4] * ACE2_pc
    V_deg_cov_ace2_apo_pc = __constants__[4] * COV_ACE2_pc
    V_tran_ace2_pc_ipc = k_tran_pc_ipc * ACE2_pc
    V_tran_cov_ace2_pc_ipc = k_tran_pc_ipc * COV_ACE2_pc
    V_syn_ace2_ipc = __constants__[27] * k_syn_ace2_pc * iPC * Vol_alv * __constants__[1]
    V_shed_ace2_ipc = __constants__[8] * ACE2_ipc
    steric_factor_ipc = 1e+0 - COV_ACE2_ipc_per_cell / __constants__[19]
    V_bind_cov_ace2_ipc = __constants__[9] * (steric_factor_ipc * COV * ACE2_ipc / Kd_cov_ace2 - COV_ACE2_ipc)
    V_deg_ace2_apo_ipc = __constants__[4] * ACE2_ipc
    V_deg_cov_ace2_apo_ipc = __constants__[4] * COV_ACE2_ipc
    V_deg_cov_apo_ipc = __constants__[4] * COV_ipc
    V_ent_cov_ipc = __constants__[12] * COV_ACE2_ipc
    V_tran_ace2_ipc_vpc = k_tran_ipc_vpc * ACE2_ipc
    V_tran_cov_ace2_ipc_vpc = k_tran_ipc_vpc * COV_ACE2_ipc
    V_tran_cov_ipc_vpc = k_tran_ipc_vpc * COV_ipc
    V_syn_ace2_vpc = __constants__[27] * k_syn_ace2_pc * vPC * Vol_alv * __constants__[1]
    V_shed_ace2_vpc = __constants__[8] * ACE2_vpc
    steric_factor_vpc = 1e+0 - COV_ACE2_vpc_per_cell / __constants__[19]
    V_bind_cov_ace2_vpc = __constants__[9] * (steric_factor_vpc * COV * ACE2_vpc / Kd_cov_ace2 - COV_ACE2_vpc)
    V_deg_ace2_apo_vpc = k_apo_vpc * ACE2_vpc
    V_deg_cov_ace2_apo_vpc = k_apo_vpc * COV_ACE2_vpc
    V_ent_cov_vpc = __constants__[12] * COV_ACE2_vpc
    V_unc_cov_vpc = __constants__[14] * COV_vpc
    V_rep_cov_rna_vpc = __constants__[15] * COV_RNA_vpc / (1e+0 + (COV_RNA_vpc / (vPC * Vol_alv * __constants__[1]) / __constants__[27]) / __constants__[16])
    V_ass_cov_vpc = __constants__[17] * COV_RNA_vpc
    V_rel_cov_vpc = __constants__[13] * COVass_vpc
    V_deg_cov_apo_vpc = k_apo_vpc * COV_vpc
    V_deg_cov_ass_apo_vpc = k_apo_vpc * COVass_vpc
    V_deg_cov_rna_apo_vpc = k_apo_vpc * COV_RNA_vpc
    V_deg_cov = Vol_alv * __constants__[18] * COV
    V_deg_cov_rna = Vol_alv * __constants__[20] * COV_RNA
    
    #__p__[29:32] .= [switch_ir,Vol_alv,PC_hs_ss_,ACE2_pc_hs_ss,]
    __du__ .= [
      V_mat_pc-V_tran_pc_ipc-V_apo_pc,  # dPC_/dt
      V_tran_pc_ipc-V_tran_ipc_vpc-V_apo_ipc,  # diPC_/dt
      V_tran_ipc_vpc-V_apo_vpc,  # dvPC_/dt
      V_syn_ace2_pc-V_shed_ace2_pc-V_bind_cov_ace2_pc-V_deg_ace2_apo_pc-V_tran_ace2_pc_ipc,  # dACE2_pc_/dt
      V_bind_cov_ace2_pc-V_deg_cov_ace2_apo_pc-V_tran_cov_ace2_pc_ipc,  # dCOV_ACE2_pc_/dt
      V_tran_ace2_pc_ipc+V_syn_ace2_ipc-V_shed_ace2_ipc-V_bind_cov_ace2_ipc-V_deg_ace2_apo_ipc-V_tran_ace2_ipc_vpc,  # dACE2_ipc_/dt
      V_tran_cov_ace2_pc_ipc+V_bind_cov_ace2_ipc-V_deg_cov_ace2_apo_ipc-V_ent_cov_ipc-V_tran_cov_ace2_ipc_vpc,  # dCOV_ACE2_ipc_/dt
      -V_deg_cov_apo_ipc+V_ent_cov_ipc-V_tran_cov_ipc_vpc,  # dCOV_ipc_/dt
      V_tran_ace2_ipc_vpc+V_syn_ace2_vpc-V_shed_ace2_vpc-V_bind_cov_ace2_vpc-V_deg_ace2_apo_vpc,  # dACE2_vpc_/dt
      V_tran_cov_ace2_ipc_vpc+V_bind_cov_ace2_vpc-V_deg_cov_ace2_apo_vpc-V_ent_cov_vpc,  # dCOV_ACE2_vpc_/dt
      V_tran_cov_ipc_vpc+V_ent_cov_vpc-V_unc_cov_vpc-V_deg_cov_apo_vpc,  # dCOV_vpc_/dt
      V_unc_cov_vpc+V_rep_cov_rna_vpc-V_ass_cov_vpc-V_deg_cov_rna_apo_vpc,  # dCOV_RNA_vpc_/dt
      -V_bind_cov_ace2_pc+V_deg_cov_ace2_apo_pc-V_bind_cov_ace2_ipc+V_deg_cov_ace2_apo_ipc-V_bind_cov_ace2_vpc+V_deg_cov_ace2_apo_vpc+V_rel_cov_vpc+V_deg_cov_ass_apo_vpc-V_deg_cov,  # dCOV_/dt
      V_deg_cov_rna_apo_vpc-V_deg_cov_rna,  # dCOV_RNA_/dt
      V_ass_cov_vpc-V_rel_cov_vpc-V_deg_cov_ass_apo_vpc,  # dCOVass_vpc_/dt
    ]
end

### output function
function nameless_saving_generator_(__outputIds__::Vector{Symbol})
    # XXX: currently force amounts: s1_, s2_ are not supported
    __actual_indexes__ = indexin(__outputIds__, [:time_day,:k_syn_ace2_pc,:k_tran_pc_ipc,:k_tran_ipc_vpc,:VO,:Kd_cov_ace2,:ACE2_pc_per_cell,:COV_ACE2_pc_per_cell,:ACE2_ipc_per_cell,:COV_ACE2_ipc_per_cell,:COV_ipc_per_cell,:ACE2_vpc_per_cell,:COV_ACE2_vpc_per_cell,:COV_vpc_per_cell,:COVass_vpc_per_cell,:COV_RNA_vpc_per_cell,:COV_num_sputum_ml,:PC_tot,:PC_percent,:iPC_percent,:vPC_percent,:ACE2_pc_per_cell_tot,:ACE2_ipc_per_cell_tot,:ACE2_vpc_per_cell_tot,:COV_pc_per_cell_tot,:COV_ipc_per_cell_tot,:COV_vpc_per_cell_tot,:steric_factor_pc,:steric_factor_ipc,:steric_factor_vpc,:COV_sgRNA_perc,:IR_apo,:k_apo_vpc,:switch_ir,:Vol_alv,:PC,:iPC,:vPC,:PC_hs_ss,:ACE2_pc,:ACE2_pc_hs_ss,:COV_ACE2_pc,:ACE2_ipc,:COV_ACE2_ipc,:COV_ipc,:ACE2_vpc,:COV_ACE2_vpc,:COV_vpc,:COV_RNA_vpc,:COV,:COV_RNA,:COVass_vpc,:anti_Ab,:V_mat_pc,:V_tran_pc_ipc,:V_tran_ipc_vpc,:V_apo_pc,:V_apo_ipc,:V_apo_vpc,:V_syn_ace2_pc,:V_shed_ace2_pc,:V_bind_cov_ace2_pc,:V_deg_ace2_apo_pc,:V_deg_cov_ace2_apo_pc,:V_tran_ace2_pc_ipc,:V_tran_cov_ace2_pc_ipc,:V_syn_ace2_ipc,:V_shed_ace2_ipc,:V_bind_cov_ace2_ipc,:V_deg_ace2_apo_ipc,:V_deg_cov_ace2_apo_ipc,:V_deg_cov_apo_ipc,:V_ent_cov_ipc,:V_tran_ace2_ipc_vpc,:V_tran_cov_ace2_ipc_vpc,:V_tran_cov_ipc_vpc,:V_syn_ace2_vpc,:V_shed_ace2_vpc,:V_bind_cov_ace2_vpc,:V_deg_ace2_apo_vpc,:V_deg_cov_ace2_apo_vpc,:V_ent_cov_vpc,:V_unc_cov_vpc,:V_rep_cov_rna_vpc,:V_ass_cov_vpc,:V_rel_cov_vpc,:V_deg_cov_apo_vpc,:V_deg_cov_ass_apo_vpc,:V_deg_cov_rna_apo_vpc,:V_deg_cov,:V_deg_cov_rna,])
    # check nothing in __actual_indexes__
    __wrongIndexes__ = findall(x -> x===nothing, __actual_indexes__)
    if length(__wrongIndexes__) > 0
      __wrongIds__ = __outputIds__[__wrongIndexes__]
      throw("Wrong identifiers: $(__wrongIds__)")
    end

    function saving_(__u__, t, __integrator__)
        __constants__ = __integrator__.p[1:28]
        (switch_ir,Vol_alv,PC_hs_ss_,ACE2_pc_hs_ss,) = __integrator__.p[29:32]
        (PC_,iPC_,vPC_,ACE2_pc,COV_ACE2_pc,ACE2_ipc,COV_ACE2_ipc,COV_ipc,ACE2_vpc,COV_ACE2_vpc,COV_vpc,COV_RNA_vpc,COV_,COV_RNA_,COVass_vpc,) = __u__

        # Heta rules
        time_day = t / 2.4e+1
        vPC = vPC_ / Vol_alv
        COVass_vpc_per_cell = __constants__[2] * COVass_vpc / vPC / Vol_alv / __constants__[1]
        COV = COV_ / Vol_alv
        COV_RNA = COV_RNA_ / Vol_alv
        COV_num_sputum_ml = __constants__[3] * (COV + COV_RNA) * __constants__[2] / __constants__[28]
        PC = PC_ / Vol_alv
        iPC = iPC_ / Vol_alv
        PC_tot = PC + iPC + vPC
        PC_percent = 1e+2 * PC / PC_tot
        iPC_percent = 1e+2 * iPC / PC_tot
        vPC_percent = 1e+2 * vPC / PC_tot
        ACE2_pc_per_cell = __constants__[2] * ACE2_pc / PC / Vol_alv / __constants__[1]
        COV_ACE2_pc_per_cell = __constants__[2] * COV_ACE2_pc / PC / Vol_alv / __constants__[1]
        ACE2_pc_per_cell_tot = ACE2_pc_per_cell + COV_ACE2_pc_per_cell
        ACE2_ipc_per_cell = __constants__[2] * ACE2_ipc / iPC / Vol_alv / __constants__[1]
        COV_ACE2_ipc_per_cell = __constants__[2] * COV_ACE2_ipc / iPC / Vol_alv / __constants__[1]
        ACE2_ipc_per_cell_tot = ACE2_ipc_per_cell + COV_ACE2_ipc_per_cell
        ACE2_vpc_per_cell = __constants__[2] * ACE2_vpc / vPC / Vol_alv / __constants__[1]
        COV_ACE2_vpc_per_cell = __constants__[2] * COV_ACE2_vpc / vPC / Vol_alv / __constants__[1]
        ACE2_vpc_per_cell_tot = ACE2_vpc_per_cell + COV_ACE2_vpc_per_cell
        COV_pc_per_cell_tot = COV_ACE2_pc_per_cell
        COV_ipc_per_cell = __constants__[2] * COV_ipc / iPC / Vol_alv / __constants__[1]
        COV_ipc_per_cell_tot = COV_ACE2_ipc_per_cell + COV_ipc_per_cell
        COV_vpc_per_cell = __constants__[2] * COV_vpc / vPC / Vol_alv / __constants__[1]
        COV_RNA_vpc_per_cell = __constants__[2] * COV_RNA_vpc / vPC / Vol_alv / __constants__[1]
        COV_vpc_per_cell_tot = COV_ACE2_vpc_per_cell + COV_vpc_per_cell + COV_RNA_vpc_per_cell
        COV_sgRNA_perc = 1e+2 * COV_RNA / (COV + COV_RNA)
        PC_hs_ss = PC_hs_ss_ / Vol_alv
        V_mat_pc = Vol_alv * __constants__[4] * PC_hs_ss
        k_tran_pc_ipc = __constants__[6] * COV_ACE2_pc / Vol_alv
        V_tran_pc_ipc = Vol_alv * k_tran_pc_ipc * PC
        k_tran_ipc_vpc = __constants__[7] * COV_ipc / Vol_alv
        V_tran_ipc_vpc = Vol_alv * k_tran_ipc_vpc * iPC
        V_apo_pc = Vol_alv * __constants__[4] * PC
        V_apo_ipc = Vol_alv * __constants__[4] * iPC
        IR_apo = 1e+0 + switch_ir * __constants__[23] * NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]) / (NaNMath.pow((1e+0 + __constants__[22] / __constants__[21]), __constants__[24]) + NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]))
        k_apo_vpc = __constants__[5] * IR_apo
        V_apo_vpc = Vol_alv * k_apo_vpc * vPC
        k_syn_ace2_pc = __constants__[8] * ACE2_pc_hs_ss / PC_hs_ss / __constants__[27] / Vol_alv / __constants__[1]
        V_syn_ace2_pc = __constants__[27] * k_syn_ace2_pc * PC * Vol_alv * __constants__[1]
        V_shed_ace2_pc = __constants__[8] * ACE2_pc
        steric_factor_pc = 1e+0 - COV_ACE2_pc_per_cell / __constants__[19]
        anti_Ab = switch_ir * __constants__[26] * NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]) / (NaNMath.pow((1e+0 + __constants__[22] / __constants__[21]), __constants__[24]) + NaNMath.pow((t / __constants__[21] - 1e+0), __constants__[24]))
        VO = anti_Ab / (__constants__[25] + anti_Ab)
        Kd_cov_ace2 = __constants__[11] / __constants__[10] / (1e+0 - VO)
        V_bind_cov_ace2_pc = __constants__[9] * (steric_factor_pc * COV * ACE2_pc / Kd_cov_ace2 - COV_ACE2_pc)
        V_deg_ace2_apo_pc = __constants__[4] * ACE2_pc
        V_deg_cov_ace2_apo_pc = __constants__[4] * COV_ACE2_pc
        V_tran_ace2_pc_ipc = k_tran_pc_ipc * ACE2_pc
        V_tran_cov_ace2_pc_ipc = k_tran_pc_ipc * COV_ACE2_pc
        V_syn_ace2_ipc = __constants__[27] * k_syn_ace2_pc * iPC * Vol_alv * __constants__[1]
        V_shed_ace2_ipc = __constants__[8] * ACE2_ipc
        steric_factor_ipc = 1e+0 - COV_ACE2_ipc_per_cell / __constants__[19]
        V_bind_cov_ace2_ipc = __constants__[9] * (steric_factor_ipc * COV * ACE2_ipc / Kd_cov_ace2 - COV_ACE2_ipc)
        V_deg_ace2_apo_ipc = __constants__[4] * ACE2_ipc
        V_deg_cov_ace2_apo_ipc = __constants__[4] * COV_ACE2_ipc
        V_deg_cov_apo_ipc = __constants__[4] * COV_ipc
        V_ent_cov_ipc = __constants__[12] * COV_ACE2_ipc
        V_tran_ace2_ipc_vpc = k_tran_ipc_vpc * ACE2_ipc
        V_tran_cov_ace2_ipc_vpc = k_tran_ipc_vpc * COV_ACE2_ipc
        V_tran_cov_ipc_vpc = k_tran_ipc_vpc * COV_ipc
        V_syn_ace2_vpc = __constants__[27] * k_syn_ace2_pc * vPC * Vol_alv * __constants__[1]
        V_shed_ace2_vpc = __constants__[8] * ACE2_vpc
        steric_factor_vpc = 1e+0 - COV_ACE2_vpc_per_cell / __constants__[19]
        V_bind_cov_ace2_vpc = __constants__[9] * (steric_factor_vpc * COV * ACE2_vpc / Kd_cov_ace2 - COV_ACE2_vpc)
        V_deg_ace2_apo_vpc = k_apo_vpc * ACE2_vpc
        V_deg_cov_ace2_apo_vpc = k_apo_vpc * COV_ACE2_vpc
        V_ent_cov_vpc = __constants__[12] * COV_ACE2_vpc
        V_unc_cov_vpc = __constants__[14] * COV_vpc
        V_rep_cov_rna_vpc = __constants__[15] * COV_RNA_vpc / (1e+0 + (COV_RNA_vpc / (vPC * Vol_alv * __constants__[1]) / __constants__[27]) / __constants__[16])
        V_ass_cov_vpc = __constants__[17] * COV_RNA_vpc
        V_rel_cov_vpc = __constants__[13] * COVass_vpc
        V_deg_cov_apo_vpc = k_apo_vpc * COV_vpc
        V_deg_cov_ass_apo_vpc = k_apo_vpc * COVass_vpc
        V_deg_cov_rna_apo_vpc = k_apo_vpc * COV_RNA_vpc
        V_deg_cov = Vol_alv * __constants__[18] * COV
        V_deg_cov_rna = Vol_alv * __constants__[20] * COV_RNA
        
        # force amount
        ACE2_pc_ = ACE2_pc
        ACE2_pc_hs_ss_ = ACE2_pc_hs_ss
        COV_ACE2_pc_ = COV_ACE2_pc
        ACE2_ipc_ = ACE2_ipc
        COV_ACE2_ipc_ = COV_ACE2_ipc
        COV_ipc_ = COV_ipc
        ACE2_vpc_ = ACE2_vpc
        COV_ACE2_vpc_ = COV_ACE2_vpc
        COV_vpc_ = COV_vpc
        COV_RNA_vpc_ = COV_RNA_vpc
        COVass_vpc_ = COVass_vpc
        anti_Ab_ = anti_Ab*Vol_alv

        return [time_day,k_syn_ace2_pc,k_tran_pc_ipc,k_tran_ipc_vpc,VO,Kd_cov_ace2,ACE2_pc_per_cell,COV_ACE2_pc_per_cell,ACE2_ipc_per_cell,COV_ACE2_ipc_per_cell,COV_ipc_per_cell,ACE2_vpc_per_cell,COV_ACE2_vpc_per_cell,COV_vpc_per_cell,COVass_vpc_per_cell,COV_RNA_vpc_per_cell,COV_num_sputum_ml,PC_tot,PC_percent,iPC_percent,vPC_percent,ACE2_pc_per_cell_tot,ACE2_ipc_per_cell_tot,ACE2_vpc_per_cell_tot,COV_pc_per_cell_tot,COV_ipc_per_cell_tot,COV_vpc_per_cell_tot,steric_factor_pc,steric_factor_ipc,steric_factor_vpc,COV_sgRNA_perc,IR_apo,k_apo_vpc,switch_ir,Vol_alv,PC,iPC,vPC,PC_hs_ss,ACE2_pc,ACE2_pc_hs_ss,COV_ACE2_pc,ACE2_ipc,COV_ACE2_ipc,COV_ipc,ACE2_vpc,COV_ACE2_vpc,COV_vpc,COV_RNA_vpc,COV,COV_RNA,COVass_vpc,anti_Ab,V_mat_pc,V_tran_pc_ipc,V_tran_ipc_vpc,V_apo_pc,V_apo_ipc,V_apo_vpc,V_syn_ace2_pc,V_shed_ace2_pc,V_bind_cov_ace2_pc,V_deg_ace2_apo_pc,V_deg_cov_ace2_apo_pc,V_tran_ace2_pc_ipc,V_tran_cov_ace2_pc_ipc,V_syn_ace2_ipc,V_shed_ace2_ipc,V_bind_cov_ace2_ipc,V_deg_ace2_apo_ipc,V_deg_cov_ace2_apo_ipc,V_deg_cov_apo_ipc,V_ent_cov_ipc,V_tran_ace2_ipc_vpc,V_tran_cov_ace2_ipc_vpc,V_tran_cov_ipc_vpc,V_syn_ace2_vpc,V_shed_ace2_vpc,V_bind_cov_ace2_vpc,V_deg_ace2_apo_vpc,V_deg_cov_ace2_apo_vpc,V_ent_cov_vpc,V_unc_cov_vpc,V_rep_cov_rna_vpc,V_ass_cov_vpc,V_rel_cov_vpc,V_deg_cov_apo_vpc,V_deg_cov_ass_apo_vpc,V_deg_cov_rna_apo_vpc,V_deg_cov,V_deg_cov_rna,][__actual_indexes__]
    end
end

### TIME EVENTS ###
function nameless_viral_load_tstops_func_(__constants__, __times__)
    return [__constants__[21]]
end

### D EVENTS ###

### STOP EVENTS ###

### event assignments
function nameless_viral_load_affect_func_(__integrator__)
    t = __integrator__.t
    __constants__ = __integrator__.p[1:28]
    (switch_ir,Vol_alv,PC_hs_ss_,ACE2_pc_hs_ss,) = __integrator__.p[29:32]
    (PC_,iPC_,vPC_,ACE2_pc,COV_ACE2_pc,ACE2_ipc,COV_ACE2_ipc,COV_ipc,ACE2_vpc,COV_ACE2_vpc,COV_vpc,COV_RNA_vpc,COV_,COV_RNA_,COVass_vpc,) = __integrator__.u

    # Heta rules
    
    # recalculated values
    (switch_ir,) = (1e+0,)
    
    # save results
    __integrator__.u[[]] = [
    ]
    __integrator__.p[[29,]] = [
        switch_ir,
    ]
end


### MODELS ###

nameless_model_ = (
  nameless_init_func_,
  nameless_ode_func_,
  NamedTuple{(
    :viral_load,
  )}([
    (nameless_viral_load_tstops_func_, nameless_viral_load_affect_func_, false),
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  nameless_saving_generator_,
  nameless_constants_num_,
  nameless_events_active_,
  nameless_records_output_
)

### OUTPUT ###

return (
  (
    nameless = nameless_model_,
  ),
  (),
  "0.7.2"
)

end
)()